generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model SuperAdmin {
  id       Int    @id @default(autoincrement())
  // Autres champs de SuperAdmin
  username String @unique
  password String
  // Relation avec les entreprises
}

model Company {
  id        Int     @id @default(autoincrement())
  firstname String
  lastname  String
  phone     String?
  email     String  @unique

  companyname  String @unique
  profileImage String?

  address             String
  accountVerified     Boolean?         @default(false)
  Token          String?          @unique
  TokenExpiresAt DateTime?
  password            String
  otp                 String?
  otpExpiresAt        DateTime?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  status              Int?             @default(0)
  projects            Project[]
  comments            Comment[]
  employee            Employee[]
  infrastructure      Infrastructure[]
}

model Employee {
  id                  Int                         @id @default(autoincrement())
  firstname           String
  lastname            String
  email               String                      @unique
  address             String
  profileImage        String?
  phone               String?
  password            String
  createdAt           DateTime                    @default(now())
  updatedAt           DateTime                    @updatedAt
  Token          String?                     @unique
  TokenExpiresAt DateTime?
  otp                 String?
  otpExpiresAt        DateTime?
  project             EmployeeProjectAssignment[]
  comments            Comment[]
  role                Int                         @default(0) //0 ;guest(lecture seule) ; 1:inspecteur(photographe)  ; 2:manager(chef de project ) ;3 ;exppert; 4: admin
  accountVerified     Boolean?                    @default(false)
  companyId           Int
  company             Company                     @relation(fields: [companyId], references: [id]) // Relation obligatoire avec l'companyistrateur
  status              Int?                        @default(0)
}

model EmployeeProjectAssignment {
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int
  project    Project  @relation(fields: [projectId], references: [id])
  projectId  Int
  createdAt  DateTime @default(now())
  lastUpdate DateTime @default(now())

  @@id([employeeId, projectId])
}

model Project {
  id                 Int                         @id @default(autoincrement())
  name               String                      @unique
  description        String?
  createdAt          DateTime                    @default(now())
  updatedAt          DateTime                    @updatedAt
  startdate          DateTime
  enddate            DateTime
  status             Int?                        @default(0)
  companyId          Int // Define a foreign key referencing company
  company            Company                     @relation(fields: [companyId], references: [id])
  creatorId          Int // Nouvelle colonne pour stocker l'ID du créateur
  resources          Resource[]
  employee           EmployeeProjectAssignment[]
  infrastructureId   Int
  infrastructure     Infrastructure              @relation(fields: [infrastructureId], references: [id])
  mediaentryfinished Boolean?                    @default(false)
  aiProcessing       AiProcessingProject?
}

model AiProcessingProject {
  id         Int       @id @default(autoincrement())
  startTime  DateTime  @default(now())
  finishTime DateTime?
  status     Boolean?  @default(false)
  projectId  Int       @unique // Ajouter une clé étrangère pour référencer le projet
  project    Project   @relation(fields: [projectId], references: [id])
}

model Infrastructure {
  id                 Int       @id @default(autoincrement())
  name               String    @unique
  locationAddress    String?
  constructionDate   DateTime?
  description        String?
  type               String
  country            String?
  city               String?
  span               Int?
  length             Int?
  image              String?
  companyId          Int
  company            Company   @relation(fields: [companyId], references: [id])
  InspectionProjects Project[]
}

model Resource {
  id        Int      @id @default(autoincrement())
  name      String
  type      String
  path      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectId Int
  project   Project @relation(fields: [projectId], references: [id])

  Damages Damage[]
}

model Comment {
  id Int @id @default(autoincrement())

  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  damageId    Int?
  companyId   Int?
  company     Company?  @relation(fields: [companyId], references: [id])
  employeeId  Int?
  employee    Employee? @relation(fields: [employeeId], references: [id])
}

model Damage {
  id           Int     @id @default(autoincrement())
  type         String?
  dangerDegree Int?
  comment      String?
  position     String?

  videoFrameNumber        Int?
  DetectResultImage       String?
  croppedDamageImage      String?
  imagesPath              String?
  confidence              Float?
  damageClassIdModel      Int?
  trackingVideoId         Int?
  detectionTimestampVideo DateTime?
  resourceId              Int
  resource                Resource  @relation(fields: [resourceId], references: [id])
}
